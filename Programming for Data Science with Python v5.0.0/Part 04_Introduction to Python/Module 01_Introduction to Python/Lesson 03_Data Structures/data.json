{
  "data": {
    "lesson": {
      "id": 654050,
      "key": "89164b0a-46fa-4455-8f11-e7176d4851a4",
      "title": "Data Structures",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "Use data structures to order and group different data types together! Learn about the types of data structures in Python, along with more useful built-in functions and operators.",
      "lesson_type": "Classroom",
      "display_workspace_project_only": false,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "https://zips.udacity-data.com/89164b0a-46fa-4455-8f11-e7176d4851a4/654050/1555959016705/Data+Structures+Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "https://zips.udacity-data.com/89164b0a-46fa-4455-8f11-e7176d4851a4/654050/1555959012620/Data+Structures+Subtitles.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 654061,
          "key": "d8e75e1a-a609-4236-aa2b-bbda0166625d",
          "title": "Introduction",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "d8e75e1a-a609-4236-aa2b-bbda0166625d",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 841190,
              "key": "631731a1-0e77-4e28-abed-a28cb4dfb209",
              "title": "PDSND Intro Juno V1",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "ulPqwSfK8j0",
                "china_cdn_id": "ulPqwSfK8j0.mp4"
              }
            },
            {
              "id": 663644,
              "key": "71ba08c7-282a-4ab6-8464-0b173f5ed02e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Data Structures\nWelcome to this lesson on Data Structures! You'll learn about:\n\n- Types of Data Structures: Lists, Tuples, Sets, Dictionaries, Compound Data Structures\n- Operators: Membership, Identity  \n- Built-In Functions or Methods\n\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 694159,
          "key": "9f46a018-d86f-4942-83d9-61abf2a9871e",
          "title": "Lists and Membership Operators",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "9f46a018-d86f-4942-83d9-61abf2a9871e",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 694171,
              "key": "14831225-045f-4c90-8e60-e3850db7c0a5",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### List and Membership Operators\n\nThere are three videos as a part of this page.  Be sure to check them out along with the additional helpful reminders!",
              "instructor_notes": ""
            },
            {
              "id": 841191,
              "key": "0cd1f41b-98d6-4779-a6a5-bf647d8c3a24",
              "title": "L2 16a Listgs And Membership Operators V3",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "Tg58Z58m2Lo",
                "china_cdn_id": "Tg58Z58m2Lo.mp4"
              }
            },
            {
              "id": 694174,
              "key": "def7b6e8-f779-4696-b652-742c809ccb42",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Lists!\n\n__Data structures__ are containers that organize and group data types together in different ways. A __list__ is one of the most common and basic data structures in Python. \n\nYou saw here that you can create a list with square brackets.  Lists can contain any mix and match of the data types you have seen so far.\n\n\n```\nlist_of_random_things = [1, 3.4, 'a string', True]\n```\n\nThis is a list of 4 elements.  All ordered containers (like lists) are indexed in python using a starting index of 0.  Therefore, to pull the first value from the above list, we can write:\n\n```\n>>> list_of_random_things[0]\n1\n```\n\nIt might seem like you can pull the last element with the following code, but this actually won't work:\n\n```\n>>> list_of_random_things[len(list_of_random_things)] \n---------------------------------------------------------------------------\nIndexError                                Traceback (most recent call last)\n<ipython-input-34-f88b03e5c60e> in <module>()\n----> 1 lst[len(lst)]\n\nIndexError: list index out of range\n```\n\nHowever, you can retrieve the last element by reducing the index by 1.  Therefore, you can do the following:\n\n```\n>>> list_of_random_things[len(list_of_random_things) - 1] \nTrue\n```\nAlternatively, you can index from the end of a list by using negative values, where -1 is the last element, -2 is the second to last element and so on.\n```\n>>> list_of_random_things[-1] \nTrue\n>>> list_of_random_things[-2] \na string\n\n```\n\n",
              "instructor_notes": ""
            },
            {
              "id": 841192,
              "key": "33c3da6f-7179-4144-926a-af78590f5ae2",
              "title": "L2 16b Lists And Membership Operators V3",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "f4OF9XtXUR8",
                "china_cdn_id": "f4OF9XtXUR8.mp4"
              }
            },
            {
              "id": 694176,
              "key": "0b806356-2e37-4795-832c-2d9ed34249d5",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Slice and Dice with Lists\n\nYou saw that we can pull more than one value from a list at a time by using **slicing**.  When using slicing, it is important to remember that the `lower` index is `inclusive` and the `upper` index is `exclusive`.\n\nTherefore, this:\n\n```\n>>> list_of_random_things = [1, 3.4, 'a string', True]\n>>> list_of_random_things[1:2]\n[3.4]\n```\n\nwill only return **3.4** in a list.  Notice this is still different than just indexing a single element, because you get a list back with this indexing. The colon tells us to go from the starting value on the left of the colon up to, but not including, the element on the right.\n\nIf you know that you want to start at the beginning, of the list you can also leave out this value.\n\n```\n>>> list_of_random_things[:2]\n[1, 3.4]\n```\nor to return all of the elements to the end of the list, we can leave off a final element.\n\n```\n>>> list_of_random_things[1:]\n[3.4, 'a string', True]\n```\n\nThis type of indexing works exactly the same on strings, where the returned value will be a string.\n\n# Are you `in` OR `not in`?\n\nYou saw that we can also use `in` and `not in` to return a **bool** of whether an element exists within our list, or if one string is a substring of another.\n\n```python\n>>> 'this' in 'this is a string'\nTrue\n>>> 'in' in 'this is a string'\nTrue\n>>> 'isa' in 'this is a string'\nFalse\n>>> 5 not in [1, 2, 3, 4, 6]\nTrue\n>>> 5 in [1, 2, 3, 4, 6]\nFalse\n```\n\n",
              "instructor_notes": ""
            },
            {
              "id": 841193,
              "key": "c3aebef1-d615-4d38-874f-643fb5bc320a",
              "title": "L2 16c Lists And Membership Operators II V4",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "dVsJ9yzbSHE",
                "china_cdn_id": "dVsJ9yzbSHE.mp4"
              }
            },
            {
              "id": 694178,
              "key": "4376d3c3-fa27-442f-b003-795731673de3",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Mutability and Order\n\n**Mutability** is about whether or not we can change an object once it has been created.  If an object (like a list or string) can be changed (like a list can), then it is called **mutable**.  However, if an object cannot be changed with creating a completely new object (like strings), then the object is considered **immutable**.\n\n```\n>>> my_lst = [1, 2, 3, 4, 5]\n>>> my_lst[0] = 'one'\n>>> print(my_lst)\n['one', 2, 3, 4, 5]\n```\n\nAs shown above, you are able to replace 1 with 'one' in the above list.  This is because lists are **mutable**.\n\nHowever,  the following does not work:\n\n```\n>>> greeting = \"Hello there\"\n>>> greeting[0] = 'M'\n```\n\nThis is because strings are **immutable**.  This means to change this string, you will need to create a completely new string.\n\nThere are two things to keep in mind for each of the data types you are using:\n\n1. Are they **mutable**?\n2. Are they **ordered**?\n\n** Order** is about whether the position of an element in the object can be used to access the element. ** Both strings and lists are ordered.** We can use the order to access parts of a list and string.\n\nHowever, you will see some data types in the next sections that will be unordered.  For each of the upcoming data structures you see, it is useful to understand how you index, are they mutable, and are they ordered.  Knowing this about the data structure is really useful!  \n\nAdditionally, you will see how these each have different methods, so why you would use one data structure vs. another is largely dependent on these properties, and what you can easily do with it!\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 468914,
          "key": "2aa94895-d620-4d00-9d91-43771844cdcf",
          "title": "Quiz: Lists and Membership Operators",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "2aa94895-d620-4d00-9d91-43771844cdcf",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 474028,
              "key": "9e95767f-e954-4960-bb43-a7380e3100f6",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Quiz: List Indexing\n\nUse list indexing to determine how many days are in a particular month based on the integer variable `month`, and store that value in the integer variable `num_days`. For example, if `month` is 8, `num_days` should be set to 31, since the eighth month, August, has 31 days.\n\nRemember to account for zero-based indexing!",
              "instructor_notes": ""
            },
            {
              "id": 474029,
              "key": "5fb219a3-c37d-4b1c-84b4-aa88a58a74e8",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "5fb219a3-c37d-4b1c-84b4-aa88a58a74e8",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "5332051021135872",
                "initial_code_files": [
                  {
                    "text": "month = 8\ndays_in_month = [31,28,31,30,31,30,31,31,30,31,30,31]\n\n# use list indexing to determine the number of days in month\n\n\nprint(num_days)",
                    "name": "HowManyDays.py"
                  }
                ]
              },
              "answer": null
            },
            {
              "id": 474030,
              "key": "782acf46-c6ee-434b-a892-2a10a3f243a7",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Quiz: Slicing Lists\n\nSelect the three most recent dates from this list using list slicing notation. Hint: negative indexes work in slices!",
              "instructor_notes": ""
            },
            {
              "id": 474032,
              "key": "0bcee82d-4675-41f4-ab01-7089b143cd9c",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "0bcee82d-4675-41f4-ab01-7089b143cd9c",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "6670217070116864",
                "initial_code_files": [
                  {
                    "text": "eclipse_dates = ['June 21, 2001', 'December 4, 2002', 'November 23, 2003',\n                 'March 29, 2006', 'August 1, 2008', 'July 22, 2009',\n                 'July 11, 2010', 'November 13, 2012', 'March 20, 2015',\n                 'March 9, 2016']\n                 \n                 \n# TODO: Modify this line so it prints the last three elements of the list\nprint(eclipse_dates)",
                    "name": "slicing.py"
                  }
                ]
              },
              "answer": null
            },
            {
              "id": 474035,
              "key": "8bb64e5e-9326-45eb-83f4-bee95af63d54",
              "title": "Mutability Matching Quiz",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "8bb64e5e-9326-45eb-83f4-bee95af63d54",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "Suppose we have the following two expressions, `sentence1` and `sentence2`:\n```python\nsentence1 = \"I wish to register a complaint.\"\nsentence2 = [\"I\", \"wish\", \"to\", \"register\", \"a\", \"complaint\", \".\"]\n```\nMatch the Python code below with the value of the modified `sentence1` or `sentence2`. If the code results in an error, match it with “Error”."
                },
                "concepts_label": "Python code",
                "answers_label": "Value of `sentence1` or `sentence2`",
                "concepts": [
                  {
                    "text": "`sentence2[6]=\"!\"`",
                    "correct_answer": {
                      "id": "a1512679606414",
                      "text": "[\"I\", \"wish\", \"to\", \"register\", \"a\", \"complaint\", \"!\"]"
                    }
                  },
                  {
                    "text": "`sentence2[0]= \"Our Majesty\"`",
                    "correct_answer": {
                      "id": "a1512679627455",
                      "text": "[\"Our Majesty\", \"wish\", \"to\", \"register\", \"a\", \"complaint\", \".\"]"
                    }
                  },
                  {
                    "text": "`sentence1[30]=\"!\"`",
                    "correct_answer": {
                      "id": "a1512679628537",
                      "text": "Error"
                    }
                  },
                  {
                    "text": "`sentence2[0:2] = [\"We\", \"want\"]`",
                    "correct_answer": {
                      "id": "a1512679629607",
                      "text": "[\"We\", \"want\", \"to\", \"register\", \"a\", “complaint”, \".\"]"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1512679627455",
                    "text": "[\"Our Majesty\", \"wish\", \"to\", \"register\", \"a\", \"complaint\", \".\"]"
                  },
                  {
                    "id": "a1512679677178",
                    "text": "\"I wish to register a complaint!\""
                  },
                  {
                    "id": "a1512679629607",
                    "text": "[\"We\", \"want\", \"to\", \"register\", \"a\", “complaint”, \".\"]"
                  },
                  {
                    "id": "a1512679606414",
                    "text": "[\"I\", \"wish\", \"to\", \"register\", \"a\", \"complaint\", \"!\"]"
                  },
                  {
                    "id": "a1512679628537",
                    "text": "Error"
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 627067,
          "key": "5f422184-b47e-4716-9faa-4242527dffbf",
          "title": "Solution: List and Membership Operators",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "5f422184-b47e-4716-9faa-4242527dffbf",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 627069,
              "key": "de121a89-9a65-4f2c-b85a-283ceafe3d02",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Quiz: List Indexing\n\nHere is a good code line to use for this task:\n```\nnum_days = days_in_month[month - 1]```\n\n\n### Quiz: Slicing Lists\nHere is a good code line to use for this task:\n```\nprint(eclipse_dates[-3:])```\n\n### Quiz Question 3\nHere are our explanations for the answers shown below:\n\n`sentence1` is a string, and is therefore an immutable object. That means that while you can refer to individual characters in `sentence1` (e.g., you can write things like `sentence1[5]`) you cannot assign value to them (you cannot write things like `sentence1[5] = 'a'`). Therefore the **third expression** (sentence1[30]=\"!\") will result in an error.\n\n`sentence2` is a list, and lists are mutable, meaning that you can change the value of individual items in `sentence2`:\n- In the **first expression** (sentence2[6]=\"!\") we changed the value of the last item in `sentence2` from \".\" to \"!\".\n- In the **second expression** (sentence2[0]= \"Our Majesty\") we changed the value of the first item in `sentence2` from \"I\" to \"Our Majesty\".\n- In the **last expression** (sentence2[0:2] = [\"We\", \"want\"]) we used slicing to simultaneously change the value of both the first and the second item in `sentence2` from \"I\" and \"wish\" to \"We\" and \"want\".",
              "instructor_notes": ""
            },
            {
              "id": 627070,
              "key": "9026faa4-d1cf-42f3-beea-b802f4218dd4",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/May/5af5db11_screen-shot-2018-05-11-at-11.03.34-am/screen-shot-2018-05-11-at-11.03.34-am.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/9026faa4-d1cf-42f3-beea-b802f4218dd4",
              "caption": "",
              "alt": "",
              "width": 1728,
              "height": 900,
              "instructor_notes": null
            }
          ]
        },
        {
          "id": 693256,
          "key": "b2b5b3ff-b3fb-43fe-8481-73cb811eadd7",
          "title": "Why Do We Need Lists?",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "b2b5b3ff-b3fb-43fe-8481-73cb811eadd7",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 693260,
              "key": "c89f7e54-aa57-4386-ad29-3d3d1c2b5d27",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Why Do We Need Lists?\n\n<br>\nLet's talk about why we need a data structure like a list or when to use it. We will borrow an example from the world of Wall Street for this discussion.  \n\nCompanies listed on the NASDAQ exchange have ticker symbols or abbreviations for each company name. For e.g., the ticker symbol for Alphabet, Inc. is GOOGL.\n\nImagine now that you own stocks for one company, say Microsoft, and want to be able to print out the ticker symbol of your stock. Since it is one value,  you can store it in the variable `microsoft`, and assign it the value of MSFT. Like this:\n\n`microsoft = MSFT` \n\nWell, that's convenient! So, now when you want to print the ticker symbol for the company you hold stocks for, you use the print command.\n``` \nprint(microsoft)\n>>> MSFT ```",
              "instructor_notes": ""
            },
            {
              "id": 693279,
              "key": "e3d5e1e8-8fc8-44f1-9280-f281f85cbea9",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "----",
              "instructor_notes": ""
            },
            {
              "id": 693281,
              "key": "2ff243fa-72f2-43a9-8ca3-246c45a4af35",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "\nLet's now consider that you are an investment fund manager, and you want to print out the stocks (or holdings) you own in an index fund (e.g., [Vanguard Institutional Index Fund](https://www.marketwatch.com/investing/fund/vinix/holdings)). An index fund includes stocks (also called holdings) for a large number of companies. Turns out Vanguard Institutional Index Fund has [506 holdings](https://investor.vanguard.com/mutual-funds/profile/VINIX)!\n\nPrinting the tickets for all 506 holdings using individual strings would require 506 strings. _Not ideal!_ Because we'll need to remember the name of each string to print it.<BR>\nYou also have to think about how  to group the 506 strings under the same index fund. _Not convenient at all!_\n\n** This is where the beauty of data structures comes into play!  You can use a list.**\n\nSince index funds have ticker symbols too, you use that as the name for the list, here VINIX, and add the ticker symbols for all the holdings into that list. Let's populate the list with the top holdings listed for [Vanguard Institutional Index Fund](https://www.marketwatch.com/investing/fund/vinix/holdings) .\n```\nVINIX = ['C', 'MA', 'BA', 'PG', 'CSCO', 'VZ', 'PFE', 'HD', 'INTC', 'T', 'V', 'UNH', 'WFC', 'CVX', 'BAC', 'JNJ', 'GOOGL', 'GOOG', 'BRK.B', 'XOM', 'JPM', 'FB', 'AMZN', 'MSFT', 'AAPL']```\n\nNow, printing the tickers becomes slightly easier. And you don't have to remember the names of the strings!\n``` \nprint(VINIX[0])\n>>> C\nprint(VINIX[1])\n>>> MA\n```\n\n_Later you will learn about more efficient ways to print the elements in a list._\n\nYou can even use the list to see if a particular stock ** is in** the index fund ` VINIX` or not. <br>\nLike this:\n\n```\n'GE' in VINIX\n>>> False\n\n'GOOGL' in VINIX\n>>> True\n```\n\n_We'll revisit this example of Wall Street later in the lesson to show how data structures can add even more details!_",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 694160,
          "key": "201ed843-7285-4a46-807e-fd18f96cd7fe",
          "title": "List Methods",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "201ed843-7285-4a46-807e-fd18f96cd7fe",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 841194,
              "key": "da0c906d-0483-4989-9a20-449e0b5959cf",
              "title": "L2 18a Lists Methods V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "7QShK49tquM",
                "china_cdn_id": "7QShK49tquM.mp4"
              }
            },
            {
              "id": 694183,
              "key": "3a75aa9d-250c-471e-bebf-0f7109698309",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "*** Correction: *** In the above video, at timestamp 0:42, the  code should read \n\n```print(\"scores: \" + str(scores))```<br>\n```print(\"grades: \" + str(grades))```",
              "instructor_notes": ""
            },
            {
              "id": 694184,
              "key": "52689eb3-0d01-4507-84eb-0b001929b286",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Useful Functions for Lists I\n\n1. `len()` returns how many elements are in a list.\n2. `max()` returns the greatest element of the list. How the greatest element is determined depends on what type objects are in the list.  The maximum element in a list of numbers is the largest number. The maximum elements in a list of strings is element that would occur last if the list were sorted alphabetically. This works because the the max function is defined in terms of the greater than comparison operator. The max function is undefined for lists that contain elements from different, incomparable types.\n3. `min()` returns the smallest element in a list. min is the opposite of max, which returns the largest element in a list.\n4. `sorted()` returns a copy of a list in order from smallest to largest, leaving the list unchanged.",
              "instructor_notes": ""
            },
            {
              "id": 841195,
              "key": "69635596-c852-4d66-b883-33730c0b6936",
              "title": "L2 18b Lists Methods V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "ugVkJZFU3U8",
                "china_cdn_id": "ugVkJZFU3U8.mp4"
              }
            },
            {
              "id": 694186,
              "key": "d2e3b018-aadd-45fa-ab73-03db940340fe",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Useful Functions for Lists II\n\n### `join` method\nJoin is a string method that takes a list of strings as an argument, and returns a string consisting of the list elements joined by a separator string.\n```python\nnew_str = \"\\n\".join([\"fore\", \"aft\", \"starboard\", \"port\"])\nprint(new_str)\n```\nOutput:\n```txt\nfore\naft\nstarboard\nport\n```\nIn this example we use the string `\"\\n\"` as the separator so that there is a newline between each element.\nWe can also use other strings as separators with .join. Here we use a hyphen.\n```python\nname = \"-\".join([\"García\", \"O'Kelly\"])\nprint(name)\n```\nOutput:\n```txt\nGarcía-O'Kelly\n```\nIt is important to remember to separate each of the items in the list you are joining with a comma (,). Forgetting to do so will not trigger an error, but will also give you unexpected results.\n\n### `append` method\nA helpful method called `append` adds an element to the end of a list.\n```python\nletters = ['a', 'b', 'c', 'd']\nletters.append('z')\nprint(letters)\n```\nOutput:\n```txt\n['a', 'b', 'c', 'd', 'z']\n```",
              "instructor_notes": ""
            },
            {
              "id": 694187,
              "key": "ba52219f-8812-4404-816d-797ff902bb1e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Try It Out!\nIn the beginning of the first video, you saw how the behaviour of variables containing mutable and immutable objects is very different and might even seem surprising at times! Experiment, use the print functions and double-check your work where you can, to make sure that your programs correctly keep track of their data. While you experiment with lists, try out some of the useful functions above.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 468919,
          "key": "9c1c1885-9a78-4108-bbdc-2bfd283f1fb4",
          "title": "Quiz: List Methods",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "9c1c1885-9a78-4108-bbdc-2bfd283f1fb4",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 474107,
              "key": "79dfbdec-78b8-43ee-93f0-a62f29cf2e3a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Quiz: `len`, `max`, `min`, and Lists\n\n",
              "instructor_notes": ""
            },
            {
              "id": 531232,
              "key": "566e2d8a-79b7-461e-8048-d1942a9df825",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "There is a Python environment for you to run test code at the bottom of this page related to any of the quizzes on this page!",
              "instructor_notes": ""
            },
            {
              "id": 474295,
              "key": "a290e384-5700-4f69-a4ea-4176ce3e2f01",
              "title": "len, max, and min",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "a290e384-5700-4f69-a4ea-4176ce3e2f01",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What would the output of the following code be? (Treat the comma in the multiple choice answers as newlines.)\n\n```python\na = [1, 5, 8]\nb = [2, 6, 9, 10]\nc = [100, 200]\n\nprint(max([len(a), len(b), len(c)]))\nprint(min([len(a), len(b), len(c)]))\n```",
                "answers": [
                  {
                    "id": "a1512771406715",
                    "text": "200, 1",
                    "is_correct": false
                  },
                  {
                    "id": "a1512771446108",
                    "text": "4, 2",
                    "is_correct": true
                  },
                  {
                    "id": "a1512771446870",
                    "text": "300, 14",
                    "is_correct": false
                  },
                  {
                    "id": "a1512771447383",
                    "text": "2, 3",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 474108,
              "key": "d3befada-35cb-4517-885c-fa7e0ec04251",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Quiz: `sorted`, `join`, and Lists\n\n",
              "instructor_notes": ""
            },
            {
              "id": 474312,
              "key": "0904a1d7-6e54-487c-a151-da22ad17bbd8",
              "title": "sorted and join",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "0904a1d7-6e54-487c-a151-da22ad17bbd8",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What would the output of the following code be? (Treat the comma in the multiple choice answers as newlines.)\n\n```python\nnames = [\"Carol\", \"Albert\", \"Ben\", \"Donna\"]\nprint(\" & \".join(sorted(names)))\n```",
                "answers": [
                  {
                    "id": "a1512772225346",
                    "text": "Albert, Ben, Carol, Donna",
                    "is_correct": false
                  },
                  {
                    "id": "a1512772328231",
                    "text": "Carol & Albert & Ben & Donna",
                    "is_correct": false
                  },
                  {
                    "id": "a1512772328827",
                    "text": " & Albert & Ben & Carol & Donna & ",
                    "is_correct": false
                  },
                  {
                    "id": "a1512772329475",
                    "text": "Albert & Ben & Carol & Donna",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 474109,
              "key": "c96894d5-acc6-4d47-816a-d170f0dd095a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Quiz: `append` and Lists\n",
              "instructor_notes": ""
            },
            {
              "id": 474314,
              "key": "dd01f54b-41e3-4706-a306-d51330a9c5e5",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "dd01f54b-41e3-4706-a306-d51330a9c5e5",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What would the output of the following code be? (Treat the commas in the multiple choice answers as newlines.)\n\n```python\nnames = [\"Carol\", \"Albert\", \"Ben\", \"Donna\"]\nnames.append(\"Eugenia\")\nprint(sorted(names))\n```",
                "answers": [
                  {
                    "id": "a1512773974679",
                    "text": "Albert & Ben & Carol & Donna & Eugenia",
                    "is_correct": false
                  },
                  {
                    "id": "a1512774029176",
                    "text": "[\"Carol\", \"Albert\", \"Ben\", \"Donna\"]",
                    "is_correct": false
                  },
                  {
                    "id": "a1512774029663",
                    "text": "['Albert', 'Ben', 'Carol', 'Donna', 'Eugenia']",
                    "is_correct": true
                  },
                  {
                    "id": "a1512774030095",
                    "text": "[\"Eugenia\", \"Carol\", \"Albert\", \"Ben\", \"Donna\"]",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 474289,
              "key": "b32c89cc-4ecd-4cf6-b921-a325fc610994",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## List Method Playground",
              "instructor_notes": ""
            },
            {
              "id": 474288,
              "key": "10671926-6940-424d-9209-b34d9b7d7ded",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "10671926-6940-424d-9209-b34d9b7d7ded",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "5264629320777728",
                "initial_code_files": [
                  {
                    "text": "# Use this playground to experiment with list methods, using Test Run\n",
                    "name": "list_methods.py"
                  }
                ]
              },
              "answer": null
            }
          ]
        },
        {
          "id": 667711,
          "key": "ad8821d9-d27d-4883-969e-b4f205a7379c",
          "title": "Check for Understanding: Lists",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "ad8821d9-d27d-4883-969e-b4f205a7379c",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 667716,
              "key": "2ccf6fe9-9c25-4bd5-8596-73129ba946a2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Check for Understanding\n\nData types and data structures are tricky but important concepts to master! Let's pause and make sure you understand the distinction between them.",
              "instructor_notes": ""
            },
            {
              "id": 688778,
              "key": "3f17a930-9f1b-41a8-b353-c5fe78fd3499",
              "title": "",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "3f17a930-9f1b-41a8-b353-c5fe78fd3499",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which of the following statements about data types and data structures are true? Select __all__ that apply.",
                "answers": [
                  {
                    "id": "a1533088021245",
                    "text": "Data structures are containers that can include different data types.",
                    "is_correct": true
                  },
                  {
                    "id": "a1533088021788",
                    "text": "Data structures can only hold data of the same data type.",
                    "is_correct": false
                  },
                  {
                    "id": "a1533088256827",
                    "text": "A list is an example of a data structure.",
                    "is_correct": true
                  },
                  {
                    "id": "a1533088283720",
                    "text": "All data types are data structures.",
                    "is_correct": false
                  },
                  {
                    "id": "a1533088284393",
                    "text": "All data structures are data types.",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 688788,
              "key": "151b96f3-01ba-437c-a534-9657a3d2ecb7",
              "title": "",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "151b96f3-01ba-437c-a534-9657a3d2ecb7",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which of the following are properties of lists? Select __all__ that apply.",
                "answers": [
                  {
                    "id": "a1533092950997",
                    "text": "Mutable",
                    "is_correct": true
                  },
                  {
                    "id": "a1533092959358",
                    "text": "Immutable",
                    "is_correct": false
                  },
                  {
                    "id": "a1533092959843",
                    "text": "Ordered",
                    "is_correct": true
                  },
                  {
                    "id": "a1533092960415",
                    "text": "Unordered",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 688791,
              "key": "ea30708d-a269-495d-a840-028365c47257",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "The next two quizzes will test your understanding of indexing and slicing lists. I encourage you to try answering these questions without testing them in code first. However, if you would like to experiment with code after your first try, there is a code editor at the bottom of this page for you to do so.",
              "instructor_notes": ""
            },
            {
              "id": 688786,
              "key": "3e5167ab-08c6-4818-9a98-a92e011bf11d",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "3e5167ab-08c6-4818-9a98-a92e011bf11d",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "Choose the correct syntax to index each of the following elements from a list, `arr`."
                },
                "concepts_label": "Element",
                "answers_label": "Indexing Syntax",
                "concepts": [
                  {
                    "text": "First element of the list ",
                    "correct_answer": {
                      "id": "a1533091632317",
                      "text": "`arr[0]`"
                    }
                  },
                  {
                    "text": "Fourth element of a list",
                    "correct_answer": {
                      "id": "a1533091786933",
                      "text": "`arr[3]`"
                    }
                  },
                  {
                    "text": "Last element of the list",
                    "correct_answer": {
                      "id": "a1533091787992",
                      "text": "`arr[len(arr) - 1]`"
                    }
                  },
                  {
                    "text": "Second to last element of the list",
                    "correct_answer": {
                      "id": "a1533091788971",
                      "text": "`arr[-2]`"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1533091632317",
                    "text": "`arr[0]`"
                  },
                  {
                    "id": "a1533091843872",
                    "text": "`arr[len(arr)]`"
                  },
                  {
                    "id": "a1533091786933",
                    "text": "`arr[3]`"
                  },
                  {
                    "id": "a1533091919397",
                    "text": "`arr[4]`"
                  },
                  {
                    "id": "a1533091787992",
                    "text": "`arr[len(arr) - 1]`"
                  },
                  {
                    "id": "a1533091973620",
                    "text": "`arr[1]`"
                  },
                  {
                    "id": "a1533091788971",
                    "text": "`arr[-2]`"
                  },
                  {
                    "id": "a1533091901154",
                    "text": "`arr[-3]`"
                  }
                ]
              }
            },
            {
              "id": 688787,
              "key": "d5b50632-290c-48f7-8323-d6395a7e89d6",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "d5b50632-290c-48f7-8323-d6395a7e89d6",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "Choose the correct syntax to slice each of the following elements from the list: `arr = ['a', 'b', 'c', 'd', 'e', 'f', 'g']`"
                },
                "concepts_label": "Elements",
                "answers_label": "Slicing Syntax",
                "concepts": [
                  {
                    "text": "`['c', 'd', 'e', 'f']`",
                    "correct_answer": {
                      "id": "a1533092267973",
                      "text": "`arr[2:6]`"
                    }
                  },
                  {
                    "text": "`['a', 'b', 'c']`",
                    "correct_answer": {
                      "id": "a1533092340228",
                      "text": "`arr[:3]`"
                    }
                  },
                  {
                    "text": "`['e', 'f', 'g']`",
                    "correct_answer": {
                      "id": "a1533092340848",
                      "text": "`arr[4:]`"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1533092340228",
                    "text": "`arr[:3]`"
                  },
                  {
                    "id": "a1533092708176",
                    "text": "`arr[2:5]`"
                  },
                  {
                    "id": "a1533092733161",
                    "text": "`arr[:2]`"
                  },
                  {
                    "id": "a1533092340848",
                    "text": "`arr[4:]`"
                  },
                  {
                    "id": "a1533092715477",
                    "text": "`arr[0:2]`"
                  },
                  {
                    "id": "a1533092740771",
                    "text": "`arr[4:6]`"
                  },
                  {
                    "id": "a1533092267973",
                    "text": "`arr[2:6]`"
                  },
                  {
                    "id": "a1533092682616",
                    "text": "`arr[3:7]`"
                  }
                ]
              }
            },
            {
              "id": 688792,
              "key": "3a8b04eb-55e9-40cf-ba5f-284e60173c43",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "3a8b04eb-55e9-40cf-ba5f-284e60173c43",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "4951354693517312",
                "initial_code_files": [
                  {
                    "text": "arr = ['a', 'b', 'c', 'd', 'e', 'f', 'g']\nprint(arr[0])",
                    "name": "list_slicing_indexing.py"
                  }
                ]
              },
              "answer": null
            }
          ]
        },
        {
          "id": 694161,
          "key": "f811ad08-7771-485d-b925-c1d743c1209c",
          "title": "Tuples",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "f811ad08-7771-485d-b925-c1d743c1209c",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 841196,
              "key": "3b4f654b-91f8-489c-94f5-f546dd41d872",
              "title": "L2 20 Tuples V4",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "dM0UkbGAark",
                "china_cdn_id": "dM0UkbGAark.mp4"
              }
            },
            {
              "id": 694191,
              "key": "47dab9fb-1d8f-453d-8c39-af4c17ef193d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Tuples\n\nA tuple is another useful container. It's a data type for immutable ordered sequences of elements. They are often used to store related pieces of information. Consider this example involving latitude and longitude:\n```python\nlocation = (13.4125, 103.866667)\nprint(\"Latitude:\", location[0])\nprint(\"Longitude:\", location[1])\n```\nTuples are similar to lists in that they store an ordered collection of objects which can be accessed by their indices. Unlike lists, however, tuples are immutable - you can't add and remove items from tuples, or sort them in place.\n\nTuples can also be used to assign multiple variables in a compact way.\n```python\ndimensions = 52, 40, 100\nlength, width, height = dimensions\nprint(\"The dimensions are {} x {} x {}\".format(length, width, height))\n```\nThe parentheses are optional when defining tuples, and programmers frequently omit them if parentheses don't clarify the code. \n\nIn the second line, three variables are assigned from the content of the tuple dimensions. This is called __tuple unpacking__. You can use tuple unpacking to assign the information from a tuple into multiple variables without having to access them one by one and make multiple assignment statements.\n\nIf we won't need to use `dimensions` directly, we could shorten those two lines of code into a single line that assigns three variables in one go!\n```python\nlength, width, height = 52, 40, 100\nprint(\"The dimensions are {} x {} x {}\".format(length, width, height))\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 468921,
          "key": "7e05f190-288e-476d-b114-5dab6eeabca0",
          "title": "Quiz: Tuples",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "7e05f190-288e-476d-b114-5dab6eeabca0",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 474318,
              "key": "a866f228-7644-4c08-9c79-33ee671c42f0",
              "title": "Tuples",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "a866f228-7644-4c08-9c79-33ee671c42f0",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "Match the following qualities to their data structure."
                },
                "concepts_label": "Data Structure",
                "answers_label": "Quality",
                "concepts": [
                  {
                    "text": "Tuples - are they ordered or unordered?",
                    "correct_answer": {
                      "id": "a1512775162355",
                      "text": "ordered"
                    }
                  },
                  {
                    "text": "Tuples - are they mutable or immutable?",
                    "correct_answer": {
                      "id": "a1512775222470",
                      "text": "immutable"
                    }
                  },
                  {
                    "text": "Lists - are they ordered or unordered?",
                    "correct_answer": {
                      "id": "a1512775223223",
                      "text": "ordered"
                    }
                  },
                  {
                    "text": "Lists - are they mutable or immutable?",
                    "correct_answer": {
                      "id": "a1512775223803",
                      "text": "mutable"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1512775223223",
                    "text": "ordered"
                  },
                  {
                    "id": "a1512775222470",
                    "text": "immutable"
                  },
                  {
                    "id": "a1512775223803",
                    "text": "mutable"
                  },
                  {
                    "id": "a1512775162355",
                    "text": "ordered"
                  },
                  {
                    "id": "a1524772934907",
                    "text": "immutable"
                  },
                  {
                    "id": "a1524764005613",
                    "text": "unordered"
                  }
                ]
              }
            },
            {
              "id": 474315,
              "key": "844820f2-8706-4396-a686-1eddec8d20b8",
              "title": "Tuples",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "844820f2-8706-4396-a686-1eddec8d20b8",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What would the output of the following code be? (Treat the comma in the multiple choice answers as newlines.)\n\n```python\ntuple_a = 1, 2\ntuple_b = (1, 2)\n\nprint(tuple_a == tuple_b)\nprint(tuple_a[1])\n```",
                "answers": [
                  {
                    "id": "a1512774728026",
                    "text": "True, 1",
                    "is_correct": false
                  },
                  {
                    "id": "a1512774788040",
                    "text": "False, 1",
                    "is_correct": false
                  },
                  {
                    "id": "a1512774788701",
                    "text": "True, 2",
                    "is_correct": true
                  },
                  {
                    "id": "a1512774789338",
                    "text": "False, 2",
                    "is_correct": false
                  },
                  {
                    "id": "a1512775648766",
                    "text": "Error",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 474333,
              "key": "5b740f21-7c82-4114-861e-855f9ca12207",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Tuples Playground",
              "instructor_notes": ""
            },
            {
              "id": 474316,
              "key": "2cae0dd7-8614-404f-adf8-433a474beb08",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "2cae0dd7-8614-404f-adf8-433a474beb08",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "4880871308525568",
                "initial_code_files": [
                  {
                    "text": "## You may test any code out here. Use Test Run to see your output",
                    "name": "tuples.py"
                  }
                ]
              },
              "answer": null
            }
          ]
        },
        {
          "id": 694162,
          "key": "ae643847-8d61-4072-8852-9d25f79de6e9",
          "title": "Sets",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "ae643847-8d61-4072-8852-9d25f79de6e9",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 841197,
              "key": "2dd9231a-e010-495d-9cfc-1c8e62cd74d6",
              "title": "L2 22 Sets V3",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "lrrwBc-DSDo",
                "china_cdn_id": "lrrwBc-DSDo.mp4"
              }
            },
            {
              "id": 694193,
              "key": "fcbfebe4-2163-46b9-be59-f08959ed5917",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Sets\n\nA __set__ is a data type for mutable unordered collections of unique elements. One application of a set is to quickly remove duplicates from a list.\n```python\nnumbers = [1, 2, 6, 3, 1, 1, 6]\nunique_nums = set(numbers)\nprint(unique_nums)\n```\nThis would output:\n```txt\n{1, 2, 3, 6}\n```\nSets support the `in` operator the same as lists do. You can add elements to sets using the `add` method, and remove elements using the `pop` method, similar to lists. Although, when you pop an element from a set, a random element is removed. Remember that sets, unlike lists, are unordered so there is no \"last element\".\n\n```python\nfruit = {\"apple\", \"banana\", \"orange\", \"grapefruit\"}  # define a set\n\nprint(\"watermelon\" in fruit)  # check for element\n\nfruit.add(\"watermelon\")  # add an element\nprint(fruit)\n\nprint(fruit.pop())  # remove a random element\nprint(fruit)\n```\nThis outputs:\n```txt\nFalse\n{'grapefruit', 'orange', 'watermelon', 'banana', 'apple'}\ngrapefruit\n{'orange', 'watermelon', 'banana', 'apple'}\n```\nOther operations you can perform with sets include those of mathematical sets. Methods like union, intersection, and difference are easy to perform with sets, and are much faster than such operators with other containers.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 468924,
          "key": "364dcf34-3ad9-4be2-a376-933dd5250805",
          "title": "Quiz: Sets",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "364dcf34-3ad9-4be2-a376-933dd5250805",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 474111,
              "key": "4a713ce8-7155-40f2-8010-deeee69deed5",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Quiz: `list` to `set`\n\n\n",
              "instructor_notes": ""
            },
            {
              "id": 474328,
              "key": "6eb869da-e8c0-4a14-b6f0-b53d0c3742ba",
              "title": "Sets I",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "6eb869da-e8c0-4a14-b6f0-b53d0c3742ba",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What would the output of the following code be?\n\n```python\na = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]\nb = set(a)\nprint(len(a) - len(b))\n```",
                "answers": [
                  {
                    "id": "a1512776345045",
                    "text": "10",
                    "is_correct": false
                  },
                  {
                    "id": "a1512776458072",
                    "text": "6",
                    "is_correct": true
                  },
                  {
                    "id": "a1512776458627",
                    "text": "4",
                    "is_correct": false
                  },
                  {
                    "id": "a1512776459144",
                    "text": "Error",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 474330,
              "key": "678a1adc-6fcc-482a-a7f0-b98f3d3160f7",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Quiz: `add` and `pop`",
              "instructor_notes": ""
            },
            {
              "id": 474329,
              "key": "2d35c8cf-6e83-4f11-87d6-f55938b1e9e0",
              "title": "Sets II",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "2d35c8cf-6e83-4f11-87d6-f55938b1e9e0",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Consider the following code:\n\n```python\na = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]\nb = set(a)\nb.add(5)\nb.pop()\n```\nAfter executing this code, will the number 5 be a part of the set `b`?",
                "answers": [
                  {
                    "id": "a1512776640767",
                    "text": "Yes",
                    "is_correct": false
                  },
                  {
                    "id": "a1512776657470",
                    "text": "No",
                    "is_correct": false
                  },
                  {
                    "id": "a1512776657972",
                    "text": "Maybe",
                    "is_correct": true
                  },
                  {
                    "id": "a1512776658466",
                    "text": "No, an error is generated",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 474332,
              "key": "8a385194-8ffe-43da-803c-97f97dce4221",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Set Playground",
              "instructor_notes": ""
            },
            {
              "id": 474327,
              "key": "57044c16-97de-444b-a72e-8ea65829e0f2",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "57044c16-97de-444b-a72e-8ea65829e0f2",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "5064046672478208",
                "initial_code_files": [
                  {
                    "text": "## You may test any code out here. Use Test Run to see your output",
                    "name": "set.py"
                  }
                ]
              },
              "answer": null
            }
          ]
        },
        {
          "id": 694163,
          "key": "47a34480-110c-4cfa-be87-73278fc1a1e3",
          "title": "Dictionaries and Identity Operators",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "47a34480-110c-4cfa-be87-73278fc1a1e3",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 841198,
              "key": "3dc2f4a0-09fb-4c4b-8451-caab2bf89f3f",
              "title": "L2 24 Dictionaries And Identiy Operators V4",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "oZJdRjVLCZw",
                "china_cdn_id": "oZJdRjVLCZw.mp4"
              }
            },
            {
              "id": 694197,
              "key": "bd31bcff-cd65-4398-b2bb-f51e75038118",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Dictionaries and Identity Operators\n\n### Dictionaries\nA __dictionary__ is a mutable data type that stores mappings of unique keys to values. Here's a dictionary that stores elements and their atomic numbers.\n```python\nelements = {\"hydrogen\": 1, \"helium\": 2, \"carbon\": 6}\n```\nDictionaries can have keys of any immutable type, like integers or tuples, not just strings. It's not even necessary for every key to have the same type! We can look up values or insert new values in the dictionary using square brackets that enclose the key.\n```python\nprint(elements[\"helium\"])  # print the value mapped to \"helium\"\nelements[\"lithium\"] = 3  # insert \"lithium\" with a value of 3 into the dictionary\n```\nWe can check whether a value is in a dictionary the same way we check whether a value is in a list or set with the `in` keyword. Dicts have a related method that's also useful, `get`. get looks up values in a dictionary, but unlike square brackets, get returns None (or a default value of your choice) if the key isn't found.\n```python\nprint(\"carbon\" in elements)\nprint(elements.get(\"dilithium\"))\n```\nThis would output:\n```txt\nTrue\nNone\n```\nCarbon is in the dictionary, so True is printed. Dilithium isn’t in our dictionary so None is returned by `get` and then printed. If you expect lookups to sometimes fail, `get` might be a better tool than normal square bracket lookups because errors can crash your program.\n\n### Identity Operators\n|Keyword|Operator|\n|--|--|\n|`is`|evaluates if both sides have the same identity|\n|`is not`|evaluates if both sides have different identities|\n\nYou can check if a key returned None with the `is` operator. You can check for the opposite using `is not`.\n```python\nn = elements.get(\"dilithium\")\nprint(n is None)\nprint(n is not None)\n```\nThis would output:\n```txt\nTrue\nFalse\n```\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 468926,
          "key": "59aed96b-4ee7-4623-b520-3cd5e6ae82e7",
          "title": "Quiz: Dictionaries and Identity Operators",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "59aed96b-4ee7-4623-b520-3cd5e6ae82e7",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 474112,
              "key": "9a3cecb9-e5d2-4b45-b4b5-dfeeee29f3e4",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Quiz: Define a Dictionary\n\nDefine a dictionary named `population` that contains this data:\n\n|  **Keys** | **Values**  |\n|---|---|\n|  Shanghai | 17.8  |\n|  Istanbul | 13.3  |\n|  Karachi |  13.0 |\n|  Mumbai | 12.5  |",
              "instructor_notes": ""
            },
            {
              "id": 474113,
              "key": "19c8f2bc-efa4-4c3c-86c1-c07ef46e8c32",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "19c8f2bc-efa4-4c3c-86c1-c07ef46e8c32",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "4639544478138368",
                "initial_code_files": [
                  {
                    "text": "# Define a Dictionary, population,\n# that provides information\n# on the world's largest cities.\n# The key is the name of a city\n# (a string), and the associated\n# value is its population in\n# millions of people.\n\n#   Key     |   Value\n# Shanghai  |   17.8\n# Istanbul  |   13.3\n# Karachi   |   13.0\n# Mumbai    |   12.5",
                    "name": "popdict.py"
                  }
                ]
              },
              "answer": null
            },
            {
              "id": 474250,
              "key": "5a561aad-ea6a-487e-b121-3cb2c4aac33f",
              "title": "Immutable Keys",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "5a561aad-ea6a-487e-b121-3cb2c4aac33f",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which of these could be used as the key for a dictionary? (Choose all that apply.) \nHint: Dictionary keys must be immutable, that is, they must be of a type that is not modifiable.",
                "answers": [
                  {
                    "id": "a1512763384298",
                    "text": "`str`",
                    "is_correct": true
                  },
                  {
                    "id": "a1512763421020",
                    "text": "`list`",
                    "is_correct": false
                  },
                  {
                    "id": "a1512763421545",
                    "text": "`int`",
                    "is_correct": true
                  },
                  {
                    "id": "a1512763422063",
                    "text": "`float`",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 474252,
              "key": "b5423fdb-5805-42d2-92c9-dc716352432d",
              "title": "Quiz: Looking Up What Isn't There",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "b5423fdb-5805-42d2-92c9-dc716352432d",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What happens if we look up a value that isn't in the dictionary? Create a test dictionary and use the square brackets to look up a value that you haven't defined. What happens?",
                "answers": [
                  {
                    "id": "a1512763525117",
                    "text": "The lookup returns `None`",
                    "is_correct": false
                  },
                  {
                    "id": "a1512763543169",
                    "text": "The key is added to the dictionary with a default value of None",
                    "is_correct": false
                  },
                  {
                    "id": "a1512763543691",
                    "text": "A `KeyError` occurs",
                    "is_correct": true
                  },
                  {
                    "id": "a1512763544153",
                    "text": "Python searches the Internet for an appropriate value",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 474257,
              "key": "a0464643-a85a-4dd8-a029-9cb603353c8e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## `get` with a Default Value\n\nDictionaries have a related method that's also useful, `get()`. `get()` looks up values in a dictionary, but unlike looking up values with square brackets, `get()` returns `None` (or a default value of your choice) if the key isn't found. If you expect lookups to sometimes fail, `get()` might be a better tool than normal square bracket lookups.\n\n```python\n>>> elements.get('dilithium')\nNone\n>>> elements['dilithium']\nKeyError: 'dilithium'\n>>> elements.get('kryptonite', 'There\\'s no such element!')\n\"There's no such element!\"\n```\nIn the last example we specified a default value (the string 'There's no such element!') to be returned instead of `None` when the key is not found.\n\n## Checking for Equality vs. Identity: `==` vs. `is`",
              "instructor_notes": ""
            },
            {
              "id": 474259,
              "key": "25d866a4-d465-42d1-a58d-5f888371d94f",
              "title": "Checking for Equality vs. Identity",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "25d866a4-d465-42d1-a58d-5f888371d94f",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What will the output of the following code be? (Treat the commas in the multiple choice answers as newlines.)\n\n```python\na = [1, 2, 3]\nb = a\nc = [1, 2, 3]\n\nprint(a == b)\nprint(a is b)\nprint(a == c)\nprint(a is c)\n```\n\nThere is a playground workspace further down this page that you can use to try it out.",
                "answers": [
                  {
                    "id": "a1512764280834",
                    "text": "True, True, True, True",
                    "is_correct": false
                  },
                  {
                    "id": "a1512764503835",
                    "text": "True, False, True, False",
                    "is_correct": false
                  },
                  {
                    "id": "a1512764504391",
                    "text": "True, True, True, False",
                    "is_correct": true
                  },
                  {
                    "id": "a1512764504903",
                    "text": "True, True, False, False",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 474261,
              "key": "e6bc23fe-2bf6-4870-b1b7-7e3b9c1690f5",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "e6bc23fe-2bf6-4870-b1b7-7e3b9c1690f5",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "4563386923352064",
                "initial_code_files": [
                  {
                    "text": "# Test the code here if you'd like\na = [1, 2, 3]\nb = a\nc = [1, 2, 3]",
                    "name": "equality_identity.py"
                  }
                ]
              },
              "answer": null
            }
          ]
        },
        {
          "id": 474114,
          "key": "4814a6a9-cd30-48b2-be9b-47fe711cf295",
          "title": "Solution: Dictionaries and Identity Operators",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "4814a6a9-cd30-48b2-be9b-47fe711cf295",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 474115,
              "key": "3fb4724a-2901-43e9-ba2b-ee8b2d9cc6a9",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Solution: Define a Dictionary\n\nWe can define the dictionary like this:\n```python\n>>> population = {'Shanghai': 17.8,\n              'Istanbul': 13.3,\n              'Karachi': 13.0,\n              'Mumbai': 12.5}\n```\nI chose to put each key-value pair on its own line to make this dictionary definition easier to read, but where and whether you use line breaks is simply a stylistic choice. This code works just as well:\n\n```python\n>>> population = {'Shanghai': 17.8, 'Istanbul': 13.3, 'Karachi': 13.0, 'Mumbai': 12.5}\n``` ",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 568649,
          "key": "91b88086-928d-42fa-8741-236c6e892a40",
          "title": "Quiz: More With Dictionaries",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "91b88086-928d-42fa-8741-236c6e892a40",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 568677,
              "key": "6de518d1-0789-4870-97c3-0baefa0a219c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Context\n\nUse the dictionary below to answer **ALL** of the questions regarding dictionaries.  Consider you have a dictionary named `animals` that looks like this:\n\n```\nanimals = {'dogs': [20, 10, 15, 8, 32, 15], 'cats': [3,4,2,8,2,4], 'rabbits': [2, 3, 3], 'fish': [0.3, 0.5, 0.8, 0.3, 1]}\n```\nLet's try a few ideas with this dictionary!  If you want to try any of the code yourself, you can test it in the environment at the bottom of the page.\n\n",
              "instructor_notes": ""
            },
            {
              "id": 568697,
              "key": "f82e03b6-b281-4695-8abe-07449a0da53a",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "f82e03b6-b281-4695-8abe-07449a0da53a",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "### Question 1\n\nMatch each description to the value it describes."
                },
                "concepts_label": "Description",
                "answers_label": "Value",
                "concepts": [
                  {
                    "text": "The data type of the keys in the dictionary.",
                    "correct_answer": {
                      "id": "a1521497721942",
                      "text": "string"
                    }
                  },
                  {
                    "text": "The data type of the values in the dictionary.",
                    "correct_answer": {
                      "id": "a1521498261488",
                      "text": "list"
                    }
                  },
                  {
                    "text": "The result of `animals['dogs']`.",
                    "correct_answer": {
                      "id": "a1521498417556",
                      "text": "[20, 10, 15, 8, 32, 15]"
                    }
                  },
                  {
                    "text": "The result of `animals['dogs'][3]`.",
                    "correct_answer": {
                      "id": "a1521498469953",
                      "text": "8"
                    }
                  },
                  {
                    "text": "The result of `animals[3]`",
                    "correct_answer": {
                      "id": "a1521499097492",
                      "text": "Error"
                    }
                  },
                  {
                    "text": "The result of `animals['fish']`",
                    "correct_answer": {
                      "id": "a1521499119725",
                      "text": "[0.3, 0.5, 0.8, 0.3, 1]"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1521498417556",
                    "text": "[20, 10, 15, 8, 32, 15]"
                  },
                  {
                    "id": "a1521498527078",
                    "text": "Error"
                  },
                  {
                    "id": "a1521498530787",
                    "text": "None"
                  },
                  {
                    "id": "a1521498261488",
                    "text": "list"
                  },
                  {
                    "id": "a1521497721942",
                    "text": "string"
                  },
                  {
                    "id": "a1521498469953",
                    "text": "8"
                  },
                  {
                    "id": "a1521498534510",
                    "text": "15"
                  },
                  {
                    "id": "a1521499119725",
                    "text": "[0.3, 0.5, 0.8, 0.3, 1]"
                  },
                  {
                    "id": "a1521498523190",
                    "text": "Error"
                  },
                  {
                    "id": "a1521499097492",
                    "text": "Error"
                  }
                ]
              }
            },
            {
              "id": 568711,
              "key": "66e0b416-4633-4bb7-a88d-c4ac85b52f95",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "66e0b416-4633-4bb7-a88d-c4ac85b52f95",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "4744123211448320",
                "initial_code_files": [
                  {
                    "text": "animals = {'dogs': [20, 10, 15, 8, 32, 15], \n 'cats': [3,4,2,8,2,4], \n 'rabbits': [2, 3, 3], \n 'fish': [0.3, 0.5, 0.8, 0.3, 1]}",
                    "name": "dictionary_practice.py"
                  }
                ]
              },
              "answer": null
            }
          ]
        },
        {
          "id": 693442,
          "key": "51bbb72b-2caf-4194-bce5-1af0400bbd2e",
          "title": "When to Use Dictionaries?",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "51bbb72b-2caf-4194-bce5-1af0400bbd2e",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 693447,
              "key": "099b6f55-2207-4fdd-a190-b84dededd7de",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## When to use Dictionaries?\n\nLet's revisit our Wall Street example from before. Previously we created a list for the index fund, [Vanguard Institutional Index Fund](https://www.marketwatch.com/investing/fund/vinix/holdings), because we wanted to print the names of the holdings (or stocks) in the index fund. \n\nNow, let's say as the investment fund manager for VINIX, you also want to print a few more details for each holding. For e.g.,  what is your rate of return on each of the holdings?\n\nA dictionary will work well here as there is a key: value association. In other words, there is a linkage between each holding and the information (e.g., rate of return), and it can be organized under one index fund, VINIX.\n```\nVINIX =  {'C': 0.74, 'MA': 0.78, 'BA': 0.79, 'PG': 0.85, 'CSCO': 0.88, 'VZ': 0.9, 'PFE': 0.92, 'HD': 0.97, 'INTC': 1.0, 'T': 1.01, 'V': 1.02, 'UNH': 1.02, 'WFC': 1.05, 'CVX': 1.05, 'BAC': 1.15, 'JNJ': 1.41, 'GOOGL': 1.46, 'GOOG': 1.47, 'BRK.B': 1.5, 'XOM': 1.52, 'JPM': 1.53, 'FB': 2.02, 'AMZN': 2.96, 'MSFT': 3.28, 'AAPL': 3.94}```",
              "instructor_notes": ""
            },
            {
              "id": 693453,
              "key": "32654fe2-dae1-4189-8140-af6be10c15cf",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "---",
              "instructor_notes": ""
            },
            {
              "id": 693455,
              "key": "171bb212-82cd-48c3-91d3-27df96c3c9bf",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "You can add even other details, such as rate of return YTD. For that we can add the details into the value  associated with the key, i.e., the ticker symbol for the holding. <br>\nLike this:\n```\nVINIX = {'C': [0.74, -6.51],  'MA': [0.78, 34.77],  'BA': [0.79, 17.01],  'PG': [0.85, -8.81],  'CSCO': [0.88, 18.56],  'VZ': [0.9, 2.16],  'PFE': [0.92, 13.96],  'HD': [0.97, 3.2],  'INTC': [1.0, 2.61],  'T': [1.01, -15.19],  'V': [1.02, 24.0],  'UNH': [1.02, 19.32],  'WFC': [1.05, -3.59],  'CVX': [1.05, -5.77],  'BAC': [1.15, 4.27],  'JNJ': [1.41, -5.58],  'GOOGL': [1.46, 17.84],  'GOOG': [1.47, 17.03],  'BRK.B': [1.5, 4.54],  'XOM': [1.52, -6.87],  'JPM': [1.53, 7.66],  'FB': [2.02, 0.91], 'AMZN': [2.96, 62.75], 'MSFT': [3.28, 26.61], 'AAPL': [3.94, 26.01]}```\n\n​",
              "instructor_notes": ""
            },
            {
              "id": 693459,
              "key": "4dc3a96b-7003-497a-8625-bf6b5b9b78b7",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "As you can see, data structures are very useful in collecting, storing and working with more information than simple strings or integers.\n\n_You will soon learn how to use dictionary methods to perform tasks, such as pull values from keys, sort values by keys, add values to the dictionary, and many other tasks that make data structures critical for data science._\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 671815,
          "key": "e77f6f70-414a-48f9-8b66-492e661c64a0",
          "title": "Check for Understanding: Data Structures",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "e77f6f70-414a-48f9-8b66-492e661c64a0",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 671837,
              "key": "b4775eaa-a819-4884-a82d-e843f5109cf0",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Check for Understanding\nLet's pause again to do a quick check for understanding.",
              "instructor_notes": ""
            },
            {
              "id": 688829,
              "key": "d445905b-8bc2-4265-ab7d-113bbd736cb2",
              "title": "",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "d445905b-8bc2-4265-ab7d-113bbd736cb2",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which of the following statements about tuples are true? Select __all__ that apply.",
                "answers": [
                  {
                    "id": "a1533097139711",
                    "text": "A tuple is a mutable data structure.",
                    "is_correct": false
                  },
                  {
                    "id": "a1533097140173",
                    "text": "A tuple is an ordered data structure.",
                    "is_correct": true
                  },
                  {
                    "id": "a1533097140780",
                    "text": "A tuple can be indexed and sliced like a list.",
                    "is_correct": true
                  },
                  {
                    "id": "a1533097793837",
                    "text": "A tuple is defined by listing a sequence of elements separated by commas and contained within curly braces: `{}`",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 688830,
              "key": "1d62f6ea-5f8b-41ed-847b-04ac5c2345e9",
              "title": "",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "1d62f6ea-5f8b-41ed-847b-04ac5c2345e9",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which of the following statements about sets are true? Select __all__ that apply.",
                "answers": [
                  {
                    "id": "a1533097623051",
                    "text": "A set is a mutable data structure.",
                    "is_correct": true
                  },
                  {
                    "id": "a1533097653968",
                    "text": "A set is an ordered data structure.",
                    "is_correct": false
                  },
                  {
                    "id": "a1533097654892",
                    "text": "A set can be indexed and sliced like a list.",
                    "is_correct": false
                  },
                  {
                    "id": "a1533097655420",
                    "text": "A set does not contain duplicate elements.",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 688831,
              "key": "bf66a401-fd75-4ae0-9ab7-cf460b2cfe68",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "bf66a401-fd75-4ae0-9ab7-cf460b2cfe68",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Is the following statement true or false?  \n_A set is the only data structure defined with curly braces: `{}`_",
                "answers": [
                  {
                    "id": "a1533098873574",
                    "text": "True",
                    "is_correct": false
                  },
                  {
                    "id": "a1533098918828",
                    "text": "False",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 688832,
              "key": "3188301c-dde8-4b92-b4e7-38d816cadacd",
              "title": "",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "3188301c-dde8-4b92-b4e7-38d816cadacd",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which of the following statements about dictionaries are true? Select __all__ that apply.",
                "answers": [
                  {
                    "id": "a1533099334812",
                    "text": "A dictionary is a mutable data structure.",
                    "is_correct": true
                  },
                  {
                    "id": "a1533099362788",
                    "text": "A dictionary is an ordered data structure.",
                    "is_correct": false
                  },
                  {
                    "id": "a1533099363397",
                    "text": "A dictionary can be indexed using keys.",
                    "is_correct": true
                  },
                  {
                    "id": "a1533099363879",
                    "text": "The keys of a dictionary are unique.",
                    "is_correct": true
                  },
                  {
                    "id": "a1533099412080",
                    "text": "Any data type can be used as a key in a dictionary.",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 688834,
              "key": "5011dd92-741e-4a6f-8313-2dc2df1eb231",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Quiz: Identify the Problem\nRun the code below - it should break. Take a look at the error message and try to figure out what the issue is. Then, answer the quiz question below the editor.",
              "instructor_notes": ""
            },
            {
              "id": 688833,
              "key": "b266a737-188f-4e11-9132-628e742a998c",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "b266a737-188f-4e11-9132-628e742a998c",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "6265917028302848",
                "initial_code_files": [
                  {
                    "text": "# invalid dictionary - this should break\nroom_numbers = {\n    ['Freddie', 'Jen']: 403,\n    ['Ned', 'Keith']: 391,\n    ['Kristin', 'Jazzmyne']: 411,\n    ['Eugene', 'Zach']: 395\n}",
                    "name": "dictionary_keys.py"
                  }
                ]
              },
              "answer": null
            },
            {
              "id": 696088,
              "key": "bfcf9a8c-7184-4f77-ac46-7160d2bbb025",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "bfcf9a8c-7184-4f77-ac46-7160d2bbb025",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What's wrong with the code above?",
                "answers": [
                  {
                    "id": "a1534902085329",
                    "text": "The dictionary can not use a container for its keys",
                    "is_correct": false
                  },
                  {
                    "id": "a1534902390855",
                    "text": "The dictionary is using a mutable datatype for its keys",
                    "is_correct": true
                  },
                  {
                    "id": "a1534902392427",
                    "text": "There are too many values in each dictionary key",
                    "is_correct": false
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 694164,
          "key": "b64714e6-9aec-43af-9a27-6ba2f8848979",
          "title": "Compound Data Structures",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "b64714e6-9aec-43af-9a27-6ba2f8848979",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 841199,
              "key": "512977d6-88df-410f-a70c-98e0c5242ed9",
              "title": "L2 26 Compound Data Structures V2",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "1EOp1AaP3BE",
                "china_cdn_id": "1EOp1AaP3BE.mp4"
              }
            },
            {
              "id": 694200,
              "key": "fa099f48-7681-44b6-954f-18df8d7b47af",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Compound Data Structures\n\nWe can include containers in other containers to create compound data structures. For example, this dictionary maps keys to values that are also dictionaries!\n```python\nelements = {\"hydrogen\": {\"number\": 1,\n                         \"weight\": 1.00794,\n                         \"symbol\": \"H\"},\n              \"helium\": {\"number\": 2,\n                         \"weight\": 4.002602,\n                         \"symbol\": \"He\"}}\n```\nWe can access elements in this nested dictionary like this.\n```python\nhelium = elements[\"helium\"]  # get the helium dictionary\nhydrogen_weight = elements[\"hydrogen\"][\"weight\"]  # get hydrogen's weight\n```\n\nYou can also add a new key to the element dictionary.\n```\noxygen = {\"number\":8,\"weight\":15.999,\"symbol\":\"O\"}  # create a new oxygen dictionary \nelements[\"oxygen\"] = oxygen  # assign 'oxygen' as a key to the elements dictionary\nprint('elements = ', elements)\n```\n\nOutput is:\n```\nelements =  {\"hydrogen\": {\"number\": 1,\n                          \"weight\": 1.00794,\n                          \"symbol\": 'H'},\n               \"helium\": {\"number\": 2,\n                          \"weight\": 4.002602,\n                          \"symbol\": \"He\"}, \n               \"oxygen\": {\"number\": 8, \n                          \"weight\": 15.999, \n                          \"symbol\": \"O\"}}```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 468928,
          "key": "788a3fa5-e1be-41ba-aab4-afad0a60b23b",
          "title": "Quiz: Compound Data Structures",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "788a3fa5-e1be-41ba-aab4-afad0a60b23b",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 474262,
              "key": "3968e635-9ebb-4eab-91b4-07d588706966",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Quiz: Adding Values to Nested Dictionaries\n\nTry your hand at working with nested dictionaries. Add another entry, 'is_noble_gas,' to each dictionary in the `elements` dictionary. After inserting the new entries you should be able to perform these lookups:\n\n```python\n>>> print(elements['hydrogen']['is_noble_gas'])\nFalse\n>>> print(elements['helium']['is_noble_gas'])\nTrue\n```",
              "instructor_notes": ""
            },
            {
              "id": 474263,
              "key": "97273d22-5719-44a0-adf1-7dcbb9d58bd0",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "97273d22-5719-44a0-adf1-7dcbb9d58bd0",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "4571559172374528",
                "initial_code_files": [
                  {
                    "text": "elements = {'hydrogen': {'number': 1, 'weight': 1.00794, 'symbol': 'H'},\n            'helium': {'number': 2, 'weight': 4.002602, 'symbol': 'He'}}\n\n# todo: Add an 'is_noble_gas' entry to the hydrogen and helium dictionaries\n# hint: helium is a noble gas, hydrogen isn't",
                    "name": "elements.py"
                  }
                ]
              },
              "answer": null
            },
            {
              "id": 474265,
              "key": "b9fd4890-7688-4b3d-b30a-269aa0d05e51",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Collections\n\nWhen we have a group of data we can think about it as a collection (of data elements). In this lesson, we have seen many different data structures that Python provides for storing, accessing and manipulating collections of data. In particular, we have seen lists, sets, and dictionaries.\n\nIn the next few quizzes, you will have a chance to practice and review the properties of lists, sets, and dictionaries.",
              "instructor_notes": ""
            },
            {
              "id": 474267,
              "key": "4ca9a91b-70b7-45b6-8090-d4a49fcfa8c7",
              "title": "Comparing Collections, Lists",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "4ca9a91b-70b7-45b6-8090-d4a49fcfa8c7",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Check the attributes of a collection for which using a Python list would be appropriate. ",
                "answers": [
                  {
                    "id": "a1512765683306",
                    "text": "The order in which you add items doesn't matter",
                    "is_correct": false
                  },
                  {
                    "id": "a1512765694532",
                    "text": "Items are always indexed with numbers starting at 0",
                    "is_correct": true
                  },
                  {
                    "id": "a1512765695030",
                    "text": "Sortable",
                    "is_correct": true
                  },
                  {
                    "id": "a1512765695502",
                    "text": "Add items with `.append`",
                    "is_correct": true
                  },
                  {
                    "id": "a1512765696547",
                    "text": "Add items with `.add`",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 474269,
              "key": "a97f63aa-9635-4b14-a38f-e54fcde1ce9f",
              "title": "Comparing Collections, Sets",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "a97f63aa-9635-4b14-a38f-e54fcde1ce9f",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Check the attributes of a collection for which using a Python set would be appropriate. ",
                "answers": [
                  {
                    "id": "a1512765753638",
                    "text": "Order in which items appear can be inconsistent",
                    "is_correct": true
                  },
                  {
                    "id": "a1512765763859",
                    "text": "You can have the same entry multiple times",
                    "is_correct": false
                  },
                  {
                    "id": "a1512765764321",
                    "text": "Mutable (you can change it)",
                    "is_correct": true
                  },
                  {
                    "id": "a1512765764801",
                    "text": "Add items with `.add`",
                    "is_correct": true
                  },
                  {
                    "id": "a1512765765253",
                    "text": "Sortable",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 474270,
              "key": "3e5a275f-37cb-4ed7-9caa-d7fccd472780",
              "title": "Comparing Collections, Dictionaries",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "3e5a275f-37cb-4ed7-9caa-d7fccd472780",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Check the attributes of a collection for which using a Python dictionary would be appropriate.",
                "answers": [
                  {
                    "id": "a1512765827376",
                    "text": "Each item contains two parts",
                    "is_correct": true
                  },
                  {
                    "id": "a1512765838813",
                    "text": "Add items with `.append`",
                    "is_correct": false
                  },
                  {
                    "id": "a1512765839334",
                    "text": "Order in which items appear can be inconsistent",
                    "is_correct": true
                  },
                  {
                    "id": "a1512765839792",
                    "text": "Sortable",
                    "is_correct": false
                  },
                  {
                    "id": "a1512765840495",
                    "text": "Can be nested",
                    "is_correct": true
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 542696,
          "key": "39fce3b2-dd8f-40cd-accf-5eebda17592e",
          "title": "Solution: Compound Data Structions",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "39fce3b2-dd8f-40cd-accf-5eebda17592e",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 542697,
              "key": "64aaa8ea-1848-4cdb-bbb5-022ee28308c2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Quiz Solution: Adding Values to Nested Dictionaries\nHere's my solution!\n```python\nelements = {'hydrogen': {'number': 1, 'weight': 1.00794, 'symbol': 'H'},\n            'helium': {'number': 2, 'weight': 4.002602, 'symbol': 'He'}}\n\nelements['hydrogen']['is_noble_gas'] = False\nelements['helium']['is_noble_gas'] = True\n```\n\nNotice the last two lines are the solution necessary to add the `is_noble_gas` key to each of the dictionaries, so the final result would be correct after running these two lines.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 664300,
          "key": "e72a31a5-b60a-42d6-abae-2b9471faebb5",
          "title": "Practice Questions",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "e72a31a5-b60a-42d6-abae-2b9471faebb5",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 667064,
              "key": "3da3da35-2512-40f2-bf92-3135acaa9dc2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Practice Questions \nThe following questions are based on the same text you saw in the last lesson, the first verse of the poem *If* by Rudyard Kipling. We've converted all letters to lowercase, removed punctuation marks from the text, and stored this modified text in the string variable `verse`.\n\n# Quiz: Count Unique Words\nYour task for this quiz is to find the number of unique words in the text. In the code editor below, complete these three steps to get your answer.\n1. Split `verse` into a list of words. **Hint:** You can use a string method you learned in the previous lesson.\n2. Convert the list into a data structure that would keep only the unique elements from the list. \n3. Print the length of the container.",
              "instructor_notes": ""
            },
            {
              "id": 665838,
              "key": "5fcfce0b-01ee-4fad-9192-55fdb90d335f",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "5fcfce0b-01ee-4fad-9192-55fdb90d335f",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "Data Structures Practice Quiz",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "6104019251101696",
                "initial_code_files": [
                  {
                    "text": "verse = \"if you can keep your head when all about you are losing theirs and blaming it on you   if you can trust yourself when all men doubt you     but make allowance for their doubting too   if you can wait and not be tired by waiting      or being lied about  don’t deal in lies   or being hated  don’t give way to hating      and yet don’t look too good  nor talk too wise\"\r\nprint(verse, '\\n')\r\n\r\n# split verse into list of words\r\nverse_list =\r\nprint(verse_list, '\\n')\r\n\r\n# convert list to a data structure that stores unique elements\r\nverse_set =\r\nprint(verse_set, '\\n')\r\n\r\n# print the number of unique words\r\nnum_unique = \r\nprint(num_unique, '\\n')",
                    "name": "count_unique_words.py"
                  }
                ]
              },
              "answer": null
            },
            {
              "id": 688990,
              "key": "5a71f760-f67a-486f-a18a-47c01ad5081c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Quiz: Verse Dictionary\nIn the code editor below, you'll find a dictionary containing the unique words of `verse` stored as keys and the number of times they appear in `verse` stored as values. Use this dictionary to answer the following questions. Submit these answers in the quiz below the code editor.\n\nTry to answer these using code, rather than inspecting the dictionary manually!\n1. How many unique words are in *verse_dict*?\n2. Is the key \"breathe\" in *verse_dict*?\n3. What is the first element in the list created when *verse_dict* is sorted by keys?  \n**Hint:** Use the appropriate dictionary method to get a list of its keys, and then sort that list. Use this list of keys to answer the next two questions as well.\n4. Which key (word) has the highest value in *verse_dict*?  ",
              "instructor_notes": ""
            },
            {
              "id": 675781,
              "key": "46bad23a-2888-4f73-be2d-8a886b0f35e4",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "46bad23a-2888-4f73-be2d-8a886b0f35e4",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "6141163193630720",
                "initial_code_files": [
                  {
                    "text": "verse_dict =  {'if': 3, 'you': 6, 'can': 3, 'keep': 1, 'your': 1, 'head': 1, 'when': 2, 'all': 2, 'about': 2, 'are': 1, 'losing': 1, 'theirs': 1, 'and': 3, 'blaming': 1, 'it': 1, 'on': 1, 'trust': 1, 'yourself': 1, 'men': 1, 'doubt': 1, 'but': 1, 'make': 1, 'allowance': 1, 'for': 1, 'their': 1, 'doubting': 1, 'too': 3, 'wait': 1, 'not': 1, 'be': 1, 'tired': 1, 'by': 1, 'waiting': 1, 'or': 2, 'being': 2, 'lied': 1, 'don\\'t': 3, 'deal': 1, 'in': 1, 'lies': 1, 'hated': 1, 'give': 1, 'way': 1, 'to': 1, 'hating': 1, 'yet': 1, 'look': 1, 'good': 1, 'nor': 1, 'talk': 1, 'wise': 1}\nprint(verse_dict, '\\n')\n\n# find number of unique keys in the dictionary\nnum_keys = \nprint(num_keys)\n\n# find whether 'breathe' is a key in the dictionary\ncontains_breathe = \nprint(contains_breathe)\n\n# create and sort a list of the dictionary's keys\nsorted_keys = \n\n# get the first element in the sorted list of keys\nprint()\n\n# find the element with the highest value in the list of keys\nprint() ",
                    "name": "verse_dictionary.py"
                  }
                ]
              },
              "answer": null
            },
            {
              "id": 666055,
              "key": "4c3c4bb8-776d-4f01-a0f6-38fbdd738370",
              "title": "",
              "semantic_type": "MatchingQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "4c3c4bb8-776d-4f01-a0f6-38fbdd738370",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "complex_prompt": {
                  "text": "Match the correct answer to the following questions about the dictionary, `verse_dict`."
                },
                "concepts_label": "Question",
                "answers_label": "Response",
                "concepts": [
                  {
                    "text": "How many unique words are in *verse_dict*?",
                    "correct_answer": {
                      "id": "a1530042311282",
                      "text": "51"
                    }
                  },
                  {
                    "text": "Is the key \"breathe\" in *verse_dict*?",
                    "correct_answer": {
                      "id": "a1530042312723",
                      "text": "NO"
                    }
                  },
                  {
                    "text": "**Bonus Question:** What is the first key in *verse_dict*?",
                    "correct_answer": {
                      "id": "a1530048204555",
                      "text": "There is no first key."
                    }
                  },
                  {
                    "text": "What is the first element in the list created when *verse_dict* is sorted by keys?",
                    "correct_answer": {
                      "id": "a1533165375567",
                      "text": "'about'"
                    }
                  },
                  {
                    "text": "Which key (word) has the highest value in *verse_dict*?",
                    "correct_answer": {
                      "id": "a1533165376479",
                      "text": "'yourself'"
                    }
                  }
                ],
                "answers": [
                  {
                    "id": "a1530042312723",
                    "text": "NO"
                  },
                  {
                    "id": "a1530047623362",
                    "text": "'wise'"
                  },
                  {
                    "id": "a1533165453425",
                    "text": "'and'"
                  },
                  {
                    "id": "a1530047624250",
                    "text": "1"
                  },
                  {
                    "id": "a1533165375567",
                    "text": "'about'"
                  },
                  {
                    "id": "a1530055676553",
                    "text": "YES"
                  },
                  {
                    "id": "a1530047576897",
                    "text": "50"
                  },
                  {
                    "id": "a1531769413171",
                    "text": "'if'"
                  },
                  {
                    "id": "a1530048204555",
                    "text": "There is no first key."
                  },
                  {
                    "id": "a1530042311282",
                    "text": "51"
                  },
                  {
                    "id": "a1533165376479",
                    "text": "'yourself'"
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 689051,
          "key": "fa90bf3e-69eb-4986-b26e-668a0aa88efb",
          "title": "Solution: Practice Questions",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "fa90bf3e-69eb-4986-b26e-668a0aa88efb",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 689053,
              "key": "3e6b966a-4d4a-46d8-beeb-ff2b93a3aea0",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Solution: Count Unique Words\n```python\nverse = \"if you can keep your head when all about you are losing theirs and blaming it on you   if you can trust yourself when all men doubt you     but make allowance for their doubting too   if you can wait and not be tired by waiting      or being lied about  don’t deal in lies   or being hated  don’t give way to hating      and yet don’t look too good  nor talk too wise\"\nprint(verse, \"\\n\")\n\n# split verse into list of words\nverse_list = verse.split()\nprint(verse_list, '\\n')\n\n# convert list to set to get unique words\nverse_set = set(verse_list)\nprint(verse_set, '\\n')\n\n# print the number of unique words\nnum_unique = len(verse_set)\nprint(num_unique)\n```",
              "instructor_notes": ""
            },
            {
              "id": 689070,
              "key": "1dfd26d4-86a6-479d-8dc9-b7429b711d67",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Output\n```txt\nif you can keep your head when all about you are losing theirs and blaming it on you   if you can trust yourself when all men doubt you     but make allowance for their doubting too   if you can wait and not be tired by waiting      or being lied about  don’t deal in lies   or being hated  don’t give way to hating      and yet don’t look too good  nor talk too wise \n\n['if', 'you', 'can', 'keep', 'your', 'head', 'when', 'all', 'about', 'you', 'are', 'losing', 'theirs', 'and', 'blaming', 'it', 'on', 'you', 'if', 'you', 'can', 'trust', 'yourself', 'when', 'all', 'men', 'doubt', 'you', 'but', 'make', 'allowance', 'for', 'their', 'doubting', 'too', 'if', 'you', 'can', 'wait', 'and', 'not', 'be', 'tired', 'by', 'waiting', 'or', 'being', 'lied', 'about', 'don’t', 'deal', 'in', 'lies', 'or', 'being', 'hated', 'don’t', 'give', 'way', 'to', 'hating', 'and', 'yet', 'don’t', 'look', 'too', 'good', 'nor', 'talk', 'too', 'wise'] \n\n{'or', 'when', 'hating', 'make', 'all', 'head', 'waiting', 'losing', 'don’t', 'to', 'look', 'about', 'yourself', 'by', 'wise', 'doubting', 'trust', 'deal', 'allowance', 'being', 'too', 'wait', 'in', 'nor', 'for', 'theirs', 'and', 'if', 'on', 'lied', 'are', 'your', 'but', 'give', 'yet', 'lies', 'good', 'men', 'tired', 'doubt', 'hated', 'blaming', 'can', 'be', 'keep', 'their', 'not', 'it', 'talk', 'way', 'you'} \n\n51\n```",
              "instructor_notes": ""
            },
            {
              "id": 689067,
              "key": "ac905070-387a-4d1b-9dcc-f10cfd037c75",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Solution: Verse Dictionary\n```python\nverse_dict =  {'if': 3, 'you': 6, 'can': 3, 'keep': 1, 'your': 1, 'head': 1, 'when': 2, 'all': 2, 'about': 2, 'are': 1, 'losing': 1, 'theirs': 1, 'and': 3, 'blaming': 1, 'it': 1, 'on': 1, 'trust': 1, 'yourself': 1, 'men': 1, 'doubt': 1, 'but': 1, 'make': 1, 'allowance': 1, 'for': 1, 'their': 1, 'doubting': 1, 'too': 3, 'wait': 1, 'not': 1, 'be': 1, 'tired': 1, 'by': 1, 'waiting': 1, 'or': 2, 'being': 2, 'lied': 1, 'don\\'t': 3, 'deal': 1, 'in': 1, 'lies': 1, 'hated': 1, 'give': 1, 'way': 1, 'to': 1, 'hating': 1, 'yet': 1, 'look': 1, 'good': 1, 'nor': 1, 'talk': 1, 'wise': 1}\nprint(verse_dict, '\\n')\n\n# find number of unique keys in the dictionary\nnum_keys = len(verse_dict)\nprint(num_keys)\n\n# find whether 'breathe' is a key in the dictionary\ncontains_breathe = \"breathe\" in verse_dict\nprint(contains_breathe)\n\n# create and sort a list of the dictionary's keys\nsorted_keys = sorted(verse_dict.keys())\n\n# get the first element in the sorted list of keys\nprint(sorted_keys[0])\n\n# find the element with the highest value in the list of keys\nprint(sorted_keys[-1]) \n```",
              "instructor_notes": ""
            },
            {
              "id": 689069,
              "key": "cf41c98e-6314-461b-8a81-cdeda4bfcdd3",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Output\n```txt\n{'make': 1, 'waiting': 1, 'tired': 1, 'when': 2, 'hating': 1, 'give': 1, 'talk': 1, 'losing': 1, 'look': 1, 'too': 3, 'doubting': 1, 'all': 2, 'be': 1, 'wait': 1, 'you': 6, 'it': 1, 'allowance': 1, 'being': 2, 'by': 1, 'for': 1, 'to': 1, 'men': 1, 'in': 1, 'can': 3, 'about': 2, 'are': 1, 'hated': 1, 'wise': 1, 'your': 1, 'yourself': 1, \"don't\": 3, 'good': 1, 'way': 1, 'keep': 1, 'if': 3, 'blaming': 1, 'nor': 1, 'but': 1, 'or': 2, 'on': 1, 'not': 1, 'deal': 1, 'trust': 1, 'doubt': 1, 'yet': 1, 'lied': 1, 'lies': 1, 'their': 1, 'theirs': 1, 'and': 3, 'head': 1} \n\n51\nFalse\nabout\nyourself\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 663449,
          "key": "2056a882-8d80-44b5-ba84-c95bbfd58d03",
          "title": "Conclusion",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "2056a882-8d80-44b5-ba84-c95bbfd58d03",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 663450,
              "key": "19fbd140-e7b0-4701-8b7b-9cb7f55d8684",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Congratulations on completing this lesson on Data Structures! \n\nA good understanding of data structures is integral for programming and data analysis. As a data analyst, you will be working with data and code all the time, so a solid understanding of what data types and data structures are available and when to use each one will help you write more efficient code.\n\nRemember, you can get more practice on sites like [HackerRank](https://www.hackerrank.com/domains/python). \n\nIn this lesson, we covered four important data structures in Python:\n\n| **Data Structure**  | **Ordered**   | **Mutable**  | **Constructor**  | **Example**   |\n|---|---|---|---|---|\n| List | Yes | Yes  | `[ ]` or `list()`  | `[5.7, 4, 'yes', 5.7]` |\n| Tuple | Yes  | No  | `( )` or `tuple()`  | `(5.7, 4, 'yes', 5.7)`  |\n| Set  | No  | Yes  | `{}`* or `set()`  | `{5.7, 4, 'yes'}`  |\n| Dictionary   | No  | No** | `{ }` or `dict()`   | `{'Jun': 75, 'Jul': 89}` |\n\n\\* You can use curly braces to define a set like this: `{1, 2, 3}`. However, if you leave the curly braces empty like this: `{}` Python will instead create an empty dictionary. So to create an empty set, use `set()`.  \n\\** A dictionary itself is mutable, but each of its individual keys must be immutable.\n\n",
              "instructor_notes": ""
            }
          ]
        }
      ]
    }
  },
  "_deprecated": [
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    }
  ]
}